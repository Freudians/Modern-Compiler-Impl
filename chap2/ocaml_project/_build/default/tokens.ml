  type linenum = int
  type token = string
  let type_ (i, _) = "TYPE   " (* string_of_int i *)
  let var_ (i, _) = "VAR   " (* string_of_int i *)
  let function_ (i, _) = "FUNCTION   " (* string_of_int i *)
  let break_ (i, _) = "BREAK   " (* string_of_int i *)
  let of_ (i, _) = "OF   " (* string_of_int i *)
  let end_ (i, _) = "END   " (* string_of_int i *)
  let in_ (i, _) = "IN   " (* string_of_int i *)
  let nil_ (i, _) = "NIL   " (* string_of_int i *)
  let let_ (i, _) = "LET   " (* string_of_int i *)
  let do_ (i, _) = "DO   " (* string_of_int i *)
  let to_ (i, _) = "TO   " (* string_of_int i *)
  let for_ (i, _) = "FOR   " (* string_of_int i *)
  let while_ (i, _) = "WHILE   " (* string_of_int i *)
  let else_ (i, _) = "ELSE   " (* string_of_int i *)
  let then_ (i, _) = "THEN   " (* string_of_int i *)
  let if_ (i, _) = "IF   " (* string_of_int i *)
  let array_ (i, _) = "ARRAY   " (* string_of_int i *)
  let assign_ (i, _) = "ASSIGN   " (* string_of_int i *)
  let or_ (i, _) = "OR   " (* string_of_int i *)
  let and_ (i, _) = "AND   " (* string_of_int i *)
  let ge_ (i, _) = "GE   " (* string_of_int i *)
  let gt_ (i, _) = "GT   " (* string_of_int i *)
  let le_ (i, _) = "LE   " (* string_of_int i *)
  let lt_ (i, _) = "LT   " (* string_of_int i *)
  let neq_ (i, _) = "NEQ   " (* string_of_int i *)
  let eq_ (i, _) = "EQ   " (* string_of_int i *)
  let divide_ (i, _) = "DIVIDE   " (* string_of_int i *)
  let times_ (i, _) = "TIMES   " (* string_of_int i *)
  let minus_ (i, _) = "MINUS   " (* string_of_int i *)
  let plus_ (i, _) = "PLUS   " (* string_of_int i *)
  let dot_ (i, _) = "DOT   " (* string_of_int i *)
  let rbrace_ (i, _) = "RBRACE   " (* string_of_int i *)
  let lbrace_ (i, _) = "LBRACE   " (* string_of_int i *)
  let rbrack_ (i, _) = "RBRACK   " (* string_of_int i *)
  let lbrack_ (i, _) = "LBRACK   " (* string_of_int i *)
  let rparen_ (i, _) = "RPAREN   " (* string_of_int i *)
  let lparen_ (i, _) = "LPAREN   " (* string_of_int i *)
  let semicolon_ (i, _) = "SEMICOLON   " (* string_of_int i *)
  let colon_ (i, _) = "COLON   " (* string_of_int i *)
  let comma_ (i, _) = "COMMA   " (* string_of_int i *)
  let string_ (s, i, _) = "STRING(" ^ s ^ ")     " (* string_of_int i *)
  let int_ (c, i, _) = "INT(" ^ string_of_int c ^ ")   " (* string_of_int i *)
  let id_ (s, i, _) = "ID(" ^ s ^ ")     " (* string_of_int i *)
  let eof_ (i, _) = "EOF   " (* string_of_int i *)
